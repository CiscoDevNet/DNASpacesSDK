// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OpenRoaming
import CommonCrypto
import Foundation
import NetworkExtension
@_exported import OpenRoaming
import Swift
import SystemConfiguration
import UIKit
import WebKit
public typealias RegisterSdkHandler = (SigningState?, OpenRoamingError?) -> Void
public typealias ProvisionProfileHandler = (OpenRoamingError?) -> Void
public typealias SigningHandler = (OpenRoamingError?) -> Void
public typealias ServiceHandler = (Data?, URLResponse?, OpenRoamingError?) -> Void
public typealias UsageStatisticsHandler = (UsageStatistics?, OpenRoamingError?) -> Void
public typealias UserDetailsHandler = (UserDetail?, OpenRoamingError?) -> Void
public typealias UserAccountDetailsHandler = (UserDetail?, OpenRoamingError?) -> Void
public typealias UpdateUserHandler = (OpenRoamingError?) -> Void
public typealias ProfileExistenceHandler = (Bool?, OpenRoamingError?) -> Void
public typealias PrivacySettingsHandler = (Bool?, OpenRoamingError?) -> Void
public typealias GetPrivacySettingsHandler = (Bool?, OpenRoamingError?) -> Void
public typealias AssociatePushHandler = (OpenRoamingError?) -> Void
public typealias DeleteUserHandler = (OpenRoamingError?) -> Void
public typealias DeleteProfileHandler = (OpenRoamingError?) -> Void
public typealias NotificationHandler = (Bool?, String?, OpenRoamingError?) -> Void
public typealias LocationHandler = ([(Double?, Double?)], OpenRoamingError?) -> Void
extension UIDevice {
  public static let modelName: String
}
public class DeviceData {
  final public let name: String
  final public let token: String
  final public let deviceType: String
  final public let uniqueDeviceId: String
  final public let key: String
  public init(key: String, value: NSDictionary)
  @objc deinit
}
public enum LoadingState {
  case started
  case finished
  public static func == (a: OpenRoaming.LoadingState, b: OpenRoaming.LoadingState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UsageStatistics {
  public var usageStatistics: [OpenRoaming.Stats] {
    get
  }
}
public struct Stats {
  public let startTime: Int64
  public let endTime: Int64
  public let ssid: String
  public let device: String
  public let duration: Int64
  public let dateTime: String
}
@_hasMissingDesignatedInitializers public class CryptoUtilsAES {
  @objc deinit
}
public enum SigningState : String {
  case signed
  case unsigned
  public var hashValue: Int {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func showVersion() -> String
public func registerSdk(appId: String, dnaSpacesKey: String, registerSdkHandler: @escaping RegisterSdkHandler)
public func isSdkRegistered() -> Bool
public func associatePushIdentifier(pushIdentifier: String, associatePushHandler: @escaping AssociatePushHandler)
public func dissociatePushIdentifier(associatePushHandler: @escaping AssociatePushHandler)
public func isPushAssociated() -> Bool
public func handleNotification(message: String, notificationHandler: @escaping NotificationHandler)
public func associateUser(signingView: SigningView, serviceName: String, signingHandler: @escaping SigningHandler)
public func associateUser(serverAuthCode: String, serviceName: ServiceName, signingHandler: @escaping SigningHandler)
public func associateUser(idType: IdType, id: String, signingHandler: @escaping SigningHandler)
public func updateUserDetails(userDetail: UserDetail, updateUserHandler: @escaping UpdateUserHandler)
public func getUserDetails(userDetailsHandler: @escaping UserDetailsHandler)
public func deleteUser(deleteUserHandler: @escaping DeleteUserHandler)
public func deleteProfile(deleteProfileHandler: @escaping DeleteProfileHandler)
public func getPrivacySettings(getPrivacySettingsHandler: @escaping GetPrivacySettingsHandler)
public func setPrivacySettings(acceptPrivacySettings: Bool, privacySettingsHandler: @escaping PrivacySettingsHandler)
public func getUsageStatistics(usageStatisticsHandler: @escaping UsageStatisticsHandler)
public func getLocation(locationHandler: @escaping LocationHandler)
public func installProfile(provisionProfileHandler: @escaping ProvisionProfileHandler)
public func profileExistence(profileExistenceHandler: @escaping ProfileExistenceHandler)
public enum Region : String, CaseIterable {
  case US
  case EU
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OpenRoaming.Region]
  public typealias RawValue = Swift.String
  public static var allCases: [OpenRoaming.Region] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct UserDetail {
  public var name: String
  public var phone: String
  public var email: String
  public var age: Int64
  public var zipCode: String
  public init(data: Data) throws
  public func json() -> Data
}
public enum SigningType : String {
  case signup
  case signin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case emptyStringToEncrypt
    case generateRandomIVFailed
    case encryptionFailed
    case decryptionFailed
    case dataToStringFailed
    public static func == (a: OpenRoaming.AES.Error, b: OpenRoaming.AES.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class StringUtils {
  @objc deinit
}
public enum IdType : String, CaseIterable {
  case email
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OpenRoaming.IdType]
  public typealias RawValue = Swift.String
  public static var allCases: [OpenRoaming.IdType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension AES {
  public func encrypt(_ string: String) throws -> Data
  public func decrypt(_ data: Data) throws -> String
}
@objc @_inheritsConvenienceInitializers public class SharedPrefs : NSObject {
  final public let PREF_APP_ID: Swift.String
  final public let PREF_CLIENT_PUBLIC_KEY: Swift.String
  final public let PREF_CLIENT_PRIVATE_KEY: Swift.String
  final public let DNA_SPACES_KEY: Swift.String
  final public let PREF_ACCESS_TOKEN: Swift.String
  final public let PREF_SDK_TOKEN: Swift.String
  final public let PREF_TERMS: Swift.String
  final public let PREF_SIGNING_STATE: Swift.String
  final public let PREF_SIGNING_SERVICE_NAME: Swift.String
  final public let DOMAIN_NAME: Swift.String
  final public let FQDN: Swift.String
  final public let PREF_PUSH_ID: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct KeyPair {
}
@_hasMissingDesignatedInitializers public class CryptoUtilRSA {
  public static func generateKeyPair(size: Int = 2048) -> KeyPair?
  public static func exportAsData(publicKey: String, size: Int = 2048) -> Data?
  public static func exportAsString(publicKey: String, size: Int = 2048) -> String?
  public static func keyToString(_ key: SecKey) -> String?
  public static func stringToKey(_ b64Key: String, size: Int = 2048, keyClass: CFString = kSecAttrKeyClassPublic) -> SecKey?
  public static func decrypt(message: String, privateKey: String) -> Data?
  public static func decrypt(base64EncodedMessage: String, privateKey: String) -> Data?
  public static func encrypt(message: String, usingPublicKey: String) -> String?
  public static func encrypt(publicKey: String, usingPublicKey: String) -> String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SigningView : UIView, WKUIDelegate, WKNavigationDelegate {
  @objc public func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)
  @objc public func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!)
  @objc public func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error)
  @objc public func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void)
  @objc deinit
}
public enum OpenRoamingError : Error {
  case NotInitialized
  case TermsNotAccepted
  case ServiceBadResponse
  case RegisterNotAuthorized
  case Hotspot2NotSupported
  case Hotspot2PermissionDenied
  case IOSVersionNotSupported
  case TokenEmpty
  case LoginFailed
  case NotSigned
  case InvalidEmail
  case InvalidPhoneNumber
  case DeviceCurrentDeleteSelfException
  case PushNotificationNotAssociatedException
  public var message: String {
    get
  }
  public static func == (a: OpenRoaming.OpenRoamingError, b: OpenRoaming.OpenRoamingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AES {
  public let key: Data
  public init(keyString: String) throws
}
@_hasMissingDesignatedInitializers public class NetworkUtils {
  public static func isConnectedToNetwork() -> Bool
  public static func installProfile(data: Data?, handler: @escaping (OpenRoamingError?) -> Void)
  @objc deinit
}
public enum ServiceName : String, CaseIterable {
  case apple
  case google
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OpenRoaming.ServiceName]
  public typealias RawValue = Swift.String
  public static var allCases: [OpenRoaming.ServiceName] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class User {
  final public let userId: String
  final public let oauthIds: Array<String>
  final public let devices: Array<DeviceData>
  public var details: UserDetail?
  final public let userIdentity: String
  final public let serviceName: ServiceName
  final public let name: String
  final public let imageName: String
  @objc deinit
}
extension OpenRoaming.LoadingState : Swift.Equatable {}
extension OpenRoaming.LoadingState : Swift.Hashable {}
extension OpenRoaming.SigningState : Swift.Equatable {}
extension OpenRoaming.SigningState : Swift.Hashable {}
extension OpenRoaming.SigningState : Swift.RawRepresentable {}
extension OpenRoaming.Region : Swift.Equatable {}
extension OpenRoaming.Region : Swift.Hashable {}
extension OpenRoaming.Region : Swift.RawRepresentable {}
extension OpenRoaming.SigningType : Swift.Equatable {}
extension OpenRoaming.SigningType : Swift.Hashable {}
extension OpenRoaming.SigningType : Swift.RawRepresentable {}
extension OpenRoaming.AES.Error : Swift.Equatable {}
extension OpenRoaming.AES.Error : Swift.Hashable {}
extension OpenRoaming.IdType : Swift.Equatable {}
extension OpenRoaming.IdType : Swift.Hashable {}
extension OpenRoaming.IdType : Swift.RawRepresentable {}
extension OpenRoaming.OpenRoamingError : Swift.Equatable {}
extension OpenRoaming.OpenRoamingError : Swift.Hashable {}
extension OpenRoaming.ServiceName : Swift.Equatable {}
extension OpenRoaming.ServiceName : Swift.Hashable {}
extension OpenRoaming.ServiceName : Swift.RawRepresentable {}
